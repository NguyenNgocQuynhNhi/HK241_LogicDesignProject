
testBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003184  08003184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003184  08003184  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003184  08003184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800318c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08003198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003198  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e66d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e87  00000000  00000000  0002e6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174b3  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee47  00000000  00000000  00049263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa62  00000000  00000000  000580aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2b0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000e2b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030ec 	.word	0x080030ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030ec 	.word	0x080030ec

0800014c <fsm_run>:
#include "fsm.h"

  int status = INIT;

void fsm_run()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status) {
 8000150:	4b4b      	ldr	r3, [pc, #300]	; (8000280 <fsm_run+0x134>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	f200 8087 	bhi.w	8000268 <fsm_run+0x11c>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000175 	.word	0x08000175
 8000164:	080001b1 	.word	0x080001b1
 8000168:	080001eb 	.word	0x080001eb
 800016c:	08000269 	.word	0x08000269
 8000170:	08000223 	.word	0x08000223
	case INIT:
		//TODO:
		lcd_goto_XY(1, 0);
 8000174:	2100      	movs	r1, #0
 8000176:	2001      	movs	r0, #1
 8000178:	f000 f93c 	bl	80003f4 <lcd_goto_XY>
		lcd_send_string("Initializing...");
 800017c:	4841      	ldr	r0, [pc, #260]	; (8000284 <fsm_run+0x138>)
 800017e:	f000 f91d 	bl	80003bc <lcd_send_string>
		ledRGB(MAX_DUTY, MAX_DUTY, MAX_DUTY);	//White
 8000182:	4b41      	ldr	r3, [pc, #260]	; (8000288 <fsm_run+0x13c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a40      	ldr	r2, [pc, #256]	; (8000288 <fsm_run+0x13c>)
 8000188:	6811      	ldr	r1, [r2, #0]
 800018a:	4a3f      	ldr	r2, [pc, #252]	; (8000288 <fsm_run+0x13c>)
 800018c:	6812      	ldr	r2, [r2, #0]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 f952 	bl	8000438 <ledRGB>

		//SET UP FOR THE NEXT STATE:
		if (fsm_flag == 1) {
 8000194:	4b3d      	ldr	r3, [pc, #244]	; (800028c <fsm_run+0x140>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b01      	cmp	r3, #1
 800019a:	d167      	bne.n	800026c <fsm_run+0x120>
			setTimerForFSM(1000);
 800019c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a0:	f000 fae2 	bl	8000768 <setTimerForFSM>
			//TODO:
			status = READ_SENSOR;
 80001a4:	4b36      	ldr	r3, [pc, #216]	; (8000280 <fsm_run+0x134>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 80001aa:	f000 f91c 	bl	80003e6 <lcd_clear_display>
		}

		break;
 80001ae:	e05d      	b.n	800026c <fsm_run+0x120>
	case READ_SENSOR:
		//TODO:
		//require to read data from STM32 to DHT20

		lcd_goto_XY(1, 0);
 80001b0:	2100      	movs	r1, #0
 80001b2:	2001      	movs	r0, #1
 80001b4:	f000 f91e 	bl	80003f4 <lcd_goto_XY>
		lcd_send_string("Reading sensor..");
 80001b8:	4835      	ldr	r0, [pc, #212]	; (8000290 <fsm_run+0x144>)
 80001ba:	f000 f8ff 	bl	80003bc <lcd_send_string>
		ledRGB(MAX_DUTY, MAX_DUTY, 0);		//Yellow
 80001be:	4b32      	ldr	r3, [pc, #200]	; (8000288 <fsm_run+0x13c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a31      	ldr	r2, [pc, #196]	; (8000288 <fsm_run+0x13c>)
 80001c4:	6811      	ldr	r1, [r2, #0]
 80001c6:	2200      	movs	r2, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 f935 	bl	8000438 <ledRGB>

		//SET UP FOR THE NEXT STATE
		if (fsm_flag == 1) {
 80001ce:	4b2f      	ldr	r3, [pc, #188]	; (800028c <fsm_run+0x140>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d14c      	bne.n	8000270 <fsm_run+0x124>
			setTimerForFSM(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f000 fac5 	bl	8000768 <setTimerForFSM>
			//TODO:
			status = PROCESSING;
 80001de:	4b28      	ldr	r3, [pc, #160]	; (8000280 <fsm_run+0x134>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 80001e4:	f000 f8ff 	bl	80003e6 <lcd_clear_display>
//			//TODO:
//			status = INIT;
//			lcd_clear_display();
//		}

		break;
 80001e8:	e042      	b.n	8000270 <fsm_run+0x124>
	case PROCESSING:
		//TODO:
		lcd_goto_XY(1, 0);
 80001ea:	2100      	movs	r1, #0
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 f901 	bl	80003f4 <lcd_goto_XY>
		lcd_send_string("Processing...");
 80001f2:	4828      	ldr	r0, [pc, #160]	; (8000294 <fsm_run+0x148>)
 80001f4:	f000 f8e2 	bl	80003bc <lcd_send_string>

		ledRGB(0, 0, MAX_DUTY);
 80001f8:	4b23      	ldr	r3, [pc, #140]	; (8000288 <fsm_run+0x13c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	461a      	mov	r2, r3
 80001fe:	2100      	movs	r1, #0
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f919 	bl	8000438 <ledRGB>
//
//		//SET UP FOR THE NEXT STATE

		if (fsm_flag == 1) {
 8000206:	4b21      	ldr	r3, [pc, #132]	; (800028c <fsm_run+0x140>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d132      	bne.n	8000274 <fsm_run+0x128>
			setTimerForFSM(3000);
 800020e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000212:	f000 faa9 	bl	8000768 <setTimerForFSM>
			//TODO:
			status = DISPLAY;
 8000216:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <fsm_run+0x134>)
 8000218:	2204      	movs	r2, #4
 800021a:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 800021c:	f000 f8e3 	bl	80003e6 <lcd_clear_display>
		}
		break;
 8000220:	e028      	b.n	8000274 <fsm_run+0x128>
	case DISPLAY:
		//TODO:
		lcd_goto_XY(1, 0);
 8000222:	2100      	movs	r1, #0
 8000224:	2001      	movs	r0, #1
 8000226:	f000 f8e5 	bl	80003f4 <lcd_goto_XY>
		lcd_send_string("Temperature: ");
 800022a:	481b      	ldr	r0, [pc, #108]	; (8000298 <fsm_run+0x14c>)
 800022c:	f000 f8c6 	bl	80003bc <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000230:	2100      	movs	r1, #0
 8000232:	2002      	movs	r0, #2
 8000234:	f000 f8de 	bl	80003f4 <lcd_goto_XY>
		lcd_send_string("Humidity: ");
 8000238:	4818      	ldr	r0, [pc, #96]	; (800029c <fsm_run+0x150>)
 800023a:	f000 f8bf 	bl	80003bc <lcd_send_string>

		ledRGB(MAX_DUTY, 0, 0);
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <fsm_run+0x13c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f8f6 	bl	8000438 <ledRGB>
//					//TODO:
//					status = INIT;
//					lcd_clear_display();
//				}

		if (fsm_flag == 1) {
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <fsm_run+0x140>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d111      	bne.n	8000278 <fsm_run+0x12c>
			setTimerForFSM(1000);
 8000254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000258:	f000 fa86 	bl	8000768 <setTimerForFSM>
			//TODO:
			status = READ_SENSOR;
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <fsm_run+0x134>)
 800025e:	2201      	movs	r2, #1
 8000260:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000262:	f000 f8c0 	bl	80003e6 <lcd_clear_display>
		}
		break;
 8000266:	e007      	b.n	8000278 <fsm_run+0x12c>
	default:
		break;
 8000268:	bf00      	nop
 800026a:	e006      	b.n	800027a <fsm_run+0x12e>
		break;
 800026c:	bf00      	nop
 800026e:	e004      	b.n	800027a <fsm_run+0x12e>
		break;
 8000270:	bf00      	nop
 8000272:	e002      	b.n	800027a <fsm_run+0x12e>
		break;
 8000274:	bf00      	nop
 8000276:	e000      	b.n	800027a <fsm_run+0x12e>
		break;
 8000278:	bf00      	nop

	}
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028
 8000284:	08003104 	.word	0x08003104
 8000288:	08003154 	.word	0x08003154
 800028c:	2000002c 	.word	0x2000002c
 8000290:	08003114 	.word	0x08003114
 8000294:	08003128 	.word	0x08003128
 8000298:	08003138 	.word	0x08003138
 800029c:	08003148 	.word	0x08003148

080002a0 <lcd_send_cmd>:
//#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup
#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f023 030f 	bic.w	r3, r3, #15
 80002b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	f043 030c 	orr.w	r3, r3, #12
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	f043 0308 	orr.w	r3, r3, #8
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	f043 030c 	orr.w	r3, r3, #12
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f043 0308 	orr.w	r3, r3, #8
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002e0:	f107 0208 	add.w	r2, r7, #8
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2304      	movs	r3, #4
 80002ea:	214e      	movs	r1, #78	; 0x4e
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <lcd_send_cmd+0x5c>)
 80002ee:	f001 f825 	bl	800133c <HAL_I2C_Master_Transmit>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000034 	.word	0x20000034

08000300 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f023 030f 	bic.w	r3, r3, #15
 8000310:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	011b      	lsls	r3, r3, #4
 8000316:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	f043 030d 	orr.w	r3, r3, #13
 800031e:	b2db      	uxtb	r3, r3
 8000320:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	f043 0309 	orr.w	r3, r3, #9
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000336:	7bbb      	ldrb	r3, [r7, #14]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000340:	f107 0208 	add.w	r2, r7, #8
 8000344:	2364      	movs	r3, #100	; 0x64
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2304      	movs	r3, #4
 800034a:	214e      	movs	r1, #78	; 0x4e
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <lcd_send_data+0x5c>)
 800034e:	f000 fff5 	bl	800133c <HAL_I2C_Master_Transmit>
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000034 	.word	0x20000034

08000360 <lcd_init>:

void lcd_init (void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000364:	2033      	movs	r0, #51	; 0x33
 8000366:	f7ff ff9b 	bl	80002a0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800036a:	2032      	movs	r0, #50	; 0x32
 800036c:	f7ff ff98 	bl	80002a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000370:	2032      	movs	r0, #50	; 0x32
 8000372:	f000 fbd1 	bl	8000b18 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000376:	2028      	movs	r0, #40	; 0x28
 8000378:	f7ff ff92 	bl	80002a0 <lcd_send_cmd>
	HAL_Delay(50);
 800037c:	2032      	movs	r0, #50	; 0x32
 800037e:	f000 fbcb 	bl	8000b18 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff8c 	bl	80002a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000388:	2032      	movs	r0, #50	; 0x32
 800038a:	f000 fbc5 	bl	8000b18 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800038e:	2006      	movs	r0, #6
 8000390:	f7ff ff86 	bl	80002a0 <lcd_send_cmd>
	HAL_Delay(50);
 8000394:	2032      	movs	r0, #50	; 0x32
 8000396:	f000 fbbf 	bl	8000b18 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800039a:	200c      	movs	r0, #12
 800039c:	f7ff ff80 	bl	80002a0 <lcd_send_cmd>
	HAL_Delay(50);
 80003a0:	2032      	movs	r0, #50	; 0x32
 80003a2:	f000 fbb9 	bl	8000b18 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80003a6:	2002      	movs	r0, #2
 80003a8:	f7ff ff7a 	bl	80002a0 <lcd_send_cmd>
	HAL_Delay(50);
 80003ac:	2032      	movs	r0, #50	; 0x32
 80003ae:	f000 fbb3 	bl	8000b18 <HAL_Delay>
	lcd_send_cmd (0x80);
 80003b2:	2080      	movs	r0, #128	; 0x80
 80003b4:	f7ff ff74 	bl	80002a0 <lcd_send_cmd>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003c4:	e006      	b.n	80003d4 <lcd_send_string+0x18>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	1c5a      	adds	r2, r3, #1
 80003ca:	607a      	str	r2, [r7, #4]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff96 	bl	8000300 <lcd_send_data>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d1f4      	bne.n	80003c6 <lcd_send_string+0xa>
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80003ea:	2001      	movs	r0, #1
 80003ec:	f7ff ff58 	bl	80002a0 <lcd_send_cmd>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d108      	bne.n	8000416 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2db      	uxtb	r3, r3
 800040c:	4413      	add	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	337f      	adds	r3, #127	; 0x7f
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e008      	b.n	8000428 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	3340      	adds	r3, #64	; 0x40
 800041c:	b2db      	uxtb	r3, r3
 800041e:	b25b      	sxtb	r3, r3
 8000420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000424:	b25b      	sxtb	r3, r3
 8000426:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff38 	bl	80002a0 <lcd_send_cmd>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <ledRGB>:
#include "ledRGB.h"

//const int MAX_DUTY = 2000;
const int MAX_DUTY = 10;

void ledRGB(int red, int green, int blue) {
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
	htim3.Instance->CCR1 = red;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <ledRGB+0x30>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = green;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <ledRGB+0x30>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	68ba      	ldr	r2, [r7, #8]
 8000452:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = blue;
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <ledRGB+0x30>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800045c:	bf00      	nop
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000088 	.word	0x20000088

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000470:	f000 faf0 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000474:	f000 f826 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000478:	f000 f91a 	bl	80006b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800047c:	f000 f85e 	bl	800053c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000480:	f000 f88a 	bl	8000598 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000484:	480e      	ldr	r0, [pc, #56]	; (80004c0 <main+0x54>)
 8000486:	f001 fefb 	bl	8002280 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//Red
 800048a:	2100      	movs	r1, #0
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <main+0x54>)
 800048e:	f001 ffa1 	bl	80023d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		//Green
 8000492:	2104      	movs	r1, #4
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <main+0x54>)
 8000496:	f001 ff9d 	bl	80023d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		//Blue
 800049a:	2108      	movs	r1, #8
 800049c:	4808      	ldr	r0, [pc, #32]	; (80004c0 <main+0x54>)
 800049e:	f001 ff99 	bl	80023d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80004a2:	f7ff ff5d 	bl	8000360 <lcd_init>
  lcd_clear_display();
 80004a6:	f7ff ff9e 	bl	80003e6 <lcd_clear_display>
//  uint32_t previousTime = 0;

//  float temperature = 26.5;
//  float humidity = 60.3;

  setTimerForFSM(2000);
 80004aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004ae:	f000 f95b 	bl	8000768 <setTimerForFSM>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_run();
 80004b2:	f7ff fe4b 	bl	800014c <fsm_run>
	  HAL_Delay(10);
 80004b6:	200a      	movs	r0, #10
 80004b8:	f000 fb2e 	bl	8000b18 <HAL_Delay>
	  fsm_run();
 80004bc:	e7f9      	b.n	80004b2 <main+0x46>
 80004be:	bf00      	nop
 80004c0:	20000088 	.word	0x20000088

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b090      	sub	sp, #64	; 0x40
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0318 	add.w	r3, r7, #24
 80004ce:	2228      	movs	r2, #40	; 0x28
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fe02 	bl	80030dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ea:	2301      	movs	r3, #1
 80004ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	2310      	movs	r3, #16
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 fa76 	bl	80019ec <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000506:	f000 f929 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	230f      	movs	r3, #15
 800050c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fce2 	bl	8001eec <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800052e:	f000 f915 	bl	800075c <Error_Handler>
  }
}
 8000532:	bf00      	nop
 8000534:	3740      	adds	r7, #64	; 0x40
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C1_Init+0x50>)
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <MX_I2C1_Init+0x54>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_I2C1_Init+0x50>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_I2C1_Init+0x58>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_I2C1_Init+0x50>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_I2C1_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C1_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_I2C1_Init+0x50>)
 800057a:	f000 fd9b 	bl	80010b4 <HAL_I2C_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000584:	f000 f8ea 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000034 	.word	0x20000034
 8000590:	40005400 	.word	0x40005400
 8000594:	000186a0 	.word	0x000186a0

08000598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08e      	sub	sp, #56	; 0x38
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
 80005c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005ca:	4a38      	ldr	r2, [pc, #224]	; (80006ac <MX_TIM3_Init+0x114>)
 80005cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005d0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d6:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005de:	2209      	movs	r2, #9
 80005e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005ee:	482e      	ldr	r0, [pc, #184]	; (80006a8 <MX_TIM3_Init+0x110>)
 80005f0:	f001 fdf6 	bl	80021e0 <HAL_TIM_Base_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80005fa:	f000 f8af 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000608:	4619      	mov	r1, r3
 800060a:	4827      	ldr	r0, [pc, #156]	; (80006a8 <MX_TIM3_Init+0x110>)
 800060c:	f002 f936 	bl	800287c <HAL_TIM_ConfigClockSource>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000616:	f000 f8a1 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800061a:	4823      	ldr	r0, [pc, #140]	; (80006a8 <MX_TIM3_Init+0x110>)
 800061c:	f001 fe82 	bl	8002324 <HAL_TIM_PWM_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000626:	f000 f899 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4619      	mov	r1, r3
 8000638:	481b      	ldr	r0, [pc, #108]	; (80006a8 <MX_TIM3_Init+0x110>)
 800063a:	f002 fcbb 	bl	8002fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000644:	f000 f88a 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <MX_TIM3_Init+0x110>)
 8000660:	f002 f84a 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800066a:	f000 f877 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2204      	movs	r2, #4
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_TIM3_Init+0x110>)
 8000676:	f002 f83f 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000680:	f000 f86c 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2208      	movs	r2, #8
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <MX_TIM3_Init+0x110>)
 800068c:	f002 f834 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000696:	f000 f861 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <MX_TIM3_Init+0x110>)
 800069c:	f000 f930 	bl	8000900 <HAL_TIM_MspPostInit>

}
 80006a0:	bf00      	nop
 80006a2:	3738      	adds	r7, #56	; 0x38
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000088 	.word	0x20000088
 80006ac:	40000400 	.word	0x40000400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_GPIO_Init+0x90>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <MX_GPIO_Init+0x90>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_GPIO_Init+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0310 	and.w	r3, r3, #16
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_GPIO_Init+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_GPIO_Init+0x90>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_GPIO_Init+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_GPIO_Init+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_GPIO_Init+0x90>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_GPIO_Init+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0x94>)
 8000714:	f000 fcb6 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2302      	movs	r3, #2
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0x94>)
 8000732:	f000 fb23 	bl	8000d7c <HAL_GPIO_Init>

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	40011000 	.word	0x40011000

08000748 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000750:	f000 f826 	bl	80007a0 <timerRun>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <setTimerForFSM>:
#include "softwareTimer.h"

int fsm_flag = 0;
int fsm_counter = 0;
void setTimerForFSM(int duration)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	fsm_counter = duration / 10;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <setTimerForFSM+0x2c>)
 8000774:	fb82 1203 	smull	r1, r2, r2, r3
 8000778:	1092      	asrs	r2, r2, #2
 800077a:	17db      	asrs	r3, r3, #31
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <setTimerForFSM+0x30>)
 8000780:	6013      	str	r3, [r2, #0]
	fsm_flag = 0;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <setTimerForFSM+0x34>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	66666667 	.word	0x66666667
 8000798:	20000030 	.word	0x20000030
 800079c:	2000002c 	.word	0x2000002c

080007a0 <timerRun>:


void timerRun() {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	if (fsm_counter > 0) {
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <timerRun+0x2c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	dd0b      	ble.n	80007c4 <timerRun+0x24>
		fsm_counter = fsm_counter - 1;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <timerRun+0x2c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	4a06      	ldr	r2, [pc, #24]	; (80007cc <timerRun+0x2c>)
 80007b4:	6013      	str	r3, [r2, #0]
		if (fsm_counter <= 0) {
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <timerRun+0x2c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	dc02      	bgt.n	80007c4 <timerRun+0x24>
			fsm_flag = 1;
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <timerRun+0x30>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000030 	.word	0x20000030
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_MspInit+0x5c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x5c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x5c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x5c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_MspInit+0x60>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_MspInit+0x60>)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <HAL_I2C_MspInit+0x70>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d123      	bne.n	80008a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_I2C_MspInit+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <HAL_I2C_MspInit+0x74>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_I2C_MspInit+0x74>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000870:	23c0      	movs	r3, #192	; 0xc0
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <HAL_I2C_MspInit+0x78>)
 8000884:	f000 fa7a 	bl	8000d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_I2C_MspInit+0x74>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_I2C_MspInit+0x74>)
 800088e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000892:	61d3      	str	r3, [r2, #28]
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_I2C_MspInit+0x74>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	201d      	movs	r0, #29
 80008e4:	f000 fa13 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e8:	201d      	movs	r0, #29
 80008ea:	f000 fa2c 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40000400 	.word	0x40000400
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <HAL_TIM_MspPostInit+0x88>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d12f      	bne.n	8000980 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_TIM_MspPostInit+0x8c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a19      	ldr	r2, [pc, #100]	; (800098c <HAL_TIM_MspPostInit+0x8c>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_TIM_MspPostInit+0x8c>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_TIM_MspPostInit+0x8c>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a13      	ldr	r2, [pc, #76]	; (800098c <HAL_TIM_MspPostInit+0x8c>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_TIM_MspPostInit+0x8c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000950:	23c0      	movs	r3, #192	; 0xc0
 8000952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <HAL_TIM_MspPostInit+0x90>)
 8000964:	f000 fa0a 	bl	8000d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <HAL_TIM_MspPostInit+0x94>)
 800097c:	f000 f9fe 	bl	8000d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40000400 	.word	0x40000400
 800098c:	40021000 	.word	0x40021000
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f87f 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <TIM3_IRQHandler+0x10>)
 80009ee:	f001 fd93 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000088 	.word	0x20000088

080009fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff fff8 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a0e:	490c      	ldr	r1, [pc, #48]	; (8000a40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a24:	4c09      	ldr	r4, [pc, #36]	; (8000a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 fb2f 	bl	8003094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff fd19 	bl	800046c <main>
  bx lr
 8000a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a44:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 8000a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a4c:	200000d4 	.word	0x200000d4

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x28>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f947 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff feb0 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f95f 	bl	8000d62 <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 f927 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200000d0 	.word	0x200000d0

08000b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	200000d0 	.word	0x200000d0

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4906      	ldr	r1, [pc, #24]	; (8000bf8 <__NVIC_EnableIRQ+0x34>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff90 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff2d 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff42 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff90 	bl	8000c50 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5f 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff35 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b08b      	sub	sp, #44	; 0x2c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	e169      	b.n	8001064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d90:	2201      	movs	r2, #1
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8158 	bne.w	800105e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4a9a      	ldr	r2, [pc, #616]	; (800101c <HAL_GPIO_Init+0x2a0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d05e      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000db8:	4a98      	ldr	r2, [pc, #608]	; (800101c <HAL_GPIO_Init+0x2a0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d875      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dbe:	4a98      	ldr	r2, [pc, #608]	; (8001020 <HAL_GPIO_Init+0x2a4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d058      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000dc4:	4a96      	ldr	r2, [pc, #600]	; (8001020 <HAL_GPIO_Init+0x2a4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d86f      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dca:	4a96      	ldr	r2, [pc, #600]	; (8001024 <HAL_GPIO_Init+0x2a8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d052      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000dd0:	4a94      	ldr	r2, [pc, #592]	; (8001024 <HAL_GPIO_Init+0x2a8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d869      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dd6:	4a94      	ldr	r2, [pc, #592]	; (8001028 <HAL_GPIO_Init+0x2ac>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d04c      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000ddc:	4a92      	ldr	r2, [pc, #584]	; (8001028 <HAL_GPIO_Init+0x2ac>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d863      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000de2:	4a92      	ldr	r2, [pc, #584]	; (800102c <HAL_GPIO_Init+0x2b0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d046      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000de8:	4a90      	ldr	r2, [pc, #576]	; (800102c <HAL_GPIO_Init+0x2b0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d85d      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	d82a      	bhi.n	8000e48 <HAL_GPIO_Init+0xcc>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d859      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000df6:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <HAL_GPIO_Init+0x80>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e77 	.word	0x08000e77
 8000e00:	08000e51 	.word	0x08000e51
 8000e04:	08000e63 	.word	0x08000e63
 8000e08:	08000ea5 	.word	0x08000ea5
 8000e0c:	08000eab 	.word	0x08000eab
 8000e10:	08000eab 	.word	0x08000eab
 8000e14:	08000eab 	.word	0x08000eab
 8000e18:	08000eab 	.word	0x08000eab
 8000e1c:	08000eab 	.word	0x08000eab
 8000e20:	08000eab 	.word	0x08000eab
 8000e24:	08000eab 	.word	0x08000eab
 8000e28:	08000eab 	.word	0x08000eab
 8000e2c:	08000eab 	.word	0x08000eab
 8000e30:	08000eab 	.word	0x08000eab
 8000e34:	08000eab 	.word	0x08000eab
 8000e38:	08000eab 	.word	0x08000eab
 8000e3c:	08000eab 	.word	0x08000eab
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e6d 	.word	0x08000e6d
 8000e48:	4a79      	ldr	r2, [pc, #484]	; (8001030 <HAL_GPIO_Init+0x2b4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e4e:	e02c      	b.n	8000eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e029      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	623b      	str	r3, [r7, #32]
          break;
 8000e60:	e024      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	3308      	adds	r3, #8
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e01f      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	330c      	adds	r3, #12
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	e01a      	b.n	8000eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	623b      	str	r3, [r7, #32]
          break;
 8000e82:	e013      	b.n	8000eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d105      	bne.n	8000e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	611a      	str	r2, [r3, #16]
          break;
 8000e96:	e009      	b.n	8000eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	615a      	str	r2, [r3, #20]
          break;
 8000ea2:	e003      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x130>
          break;
 8000eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2bff      	cmp	r3, #255	; 0xff
 8000eb0:	d801      	bhi.n	8000eb6 <HAL_GPIO_Init+0x13a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	e001      	b.n	8000eba <HAL_GPIO_Init+0x13e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	2bff      	cmp	r3, #255	; 0xff
 8000ec0:	d802      	bhi.n	8000ec8 <HAL_GPIO_Init+0x14c>
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x152>
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	3b08      	subs	r3, #8
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	401a      	ands	r2, r3
 8000ee0:	6a39      	ldr	r1, [r7, #32]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80b1 	beq.w	800105e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x2b8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x2b8>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <HAL_GPIO_Init+0x2b8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f14:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_GPIO_Init+0x2bc>)
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a40      	ldr	r2, [pc, #256]	; (800103c <HAL_GPIO_Init+0x2c0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d013      	beq.n	8000f68 <HAL_GPIO_Init+0x1ec>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a3f      	ldr	r2, [pc, #252]	; (8001040 <HAL_GPIO_Init+0x2c4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d00d      	beq.n	8000f64 <HAL_GPIO_Init+0x1e8>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a3e      	ldr	r2, [pc, #248]	; (8001044 <HAL_GPIO_Init+0x2c8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d007      	beq.n	8000f60 <HAL_GPIO_Init+0x1e4>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <HAL_GPIO_Init+0x2cc>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d101      	bne.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7a:	492f      	ldr	r1, [pc, #188]	; (8001038 <HAL_GPIO_Init+0x2bc>)
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	492c      	ldr	r1, [pc, #176]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	608b      	str	r3, [r1, #8]
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4928      	ldr	r1, [pc, #160]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	4922      	ldr	r1, [pc, #136]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60cb      	str	r3, [r1, #12]
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	491e      	ldr	r1, [pc, #120]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	4918      	ldr	r1, [pc, #96]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4914      	ldr	r1, [pc, #80]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d021      	beq.n	8001050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_GPIO_Init+0x2d0>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	490e      	ldr	r1, [pc, #56]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
 8001018:	e021      	b.n	800105e <HAL_GPIO_Init+0x2e2>
 800101a:	bf00      	nop
 800101c:	10320000 	.word	0x10320000
 8001020:	10310000 	.word	0x10310000
 8001024:	10220000 	.word	0x10220000
 8001028:	10210000 	.word	0x10210000
 800102c:	10120000 	.word	0x10120000
 8001030:	10110000 	.word	0x10110000
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	40011000 	.word	0x40011000
 8001048:	40011400 	.word	0x40011400
 800104c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_GPIO_Init+0x304>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	43db      	mvns	r3, r3
 8001058:	4909      	ldr	r1, [pc, #36]	; (8001080 <HAL_GPIO_Init+0x304>)
 800105a:	4013      	ands	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	3301      	adds	r3, #1
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f47f ae8e 	bne.w	8000d90 <HAL_GPIO_Init+0x14>
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	372c      	adds	r7, #44	; 0x2c
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001094:	787b      	ldrb	r3, [r7, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010a0:	e003      	b.n	80010aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	611a      	str	r2, [r3, #16]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e12b      	b.n	800131e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fbac 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001118:	f001 f830 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 800111c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a81      	ldr	r2, [pc, #516]	; (8001328 <HAL_I2C_Init+0x274>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d807      	bhi.n	8001138 <HAL_I2C_Init+0x84>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4a80      	ldr	r2, [pc, #512]	; (800132c <HAL_I2C_Init+0x278>)
 800112c:	4293      	cmp	r3, r2
 800112e:	bf94      	ite	ls
 8001130:	2301      	movls	r3, #1
 8001132:	2300      	movhi	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	e006      	b.n	8001146 <HAL_I2C_Init+0x92>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4a7d      	ldr	r2, [pc, #500]	; (8001330 <HAL_I2C_Init+0x27c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	bf94      	ite	ls
 8001140:	2301      	movls	r3, #1
 8001142:	2300      	movhi	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0e7      	b.n	800131e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4a78      	ldr	r2, [pc, #480]	; (8001334 <HAL_I2C_Init+0x280>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9b      	lsrs	r3, r3, #18
 8001158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	430a      	orrs	r2, r1
 800116c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a6a      	ldr	r2, [pc, #424]	; (8001328 <HAL_I2C_Init+0x274>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d802      	bhi.n	8001188 <HAL_I2C_Init+0xd4>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3301      	adds	r3, #1
 8001186:	e009      	b.n	800119c <HAL_I2C_Init+0xe8>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	4a69      	ldr	r2, [pc, #420]	; (8001338 <HAL_I2C_Init+0x284>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	099b      	lsrs	r3, r3, #6
 800119a:	3301      	adds	r3, #1
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	495c      	ldr	r1, [pc, #368]	; (8001328 <HAL_I2C_Init+0x274>)
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d819      	bhi.n	80011f0 <HAL_I2C_Init+0x13c>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1e59      	subs	r1, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ca:	1c59      	adds	r1, r3, #1
 80011cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011d0:	400b      	ands	r3, r1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <HAL_I2C_Init+0x138>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1e59      	subs	r1, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ea:	e051      	b.n	8001290 <HAL_I2C_Init+0x1dc>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e04f      	b.n	8001290 <HAL_I2C_Init+0x1dc>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d111      	bne.n	800121c <HAL_I2C_Init+0x168>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e58      	subs	r0, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6859      	ldr	r1, [r3, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	440b      	add	r3, r1
 8001206:	fbb0 f3f3 	udiv	r3, r0, r3
 800120a:	3301      	adds	r3, #1
 800120c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	e012      	b.n	8001242 <HAL_I2C_Init+0x18e>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1e58      	subs	r0, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6859      	ldr	r1, [r3, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	0099      	lsls	r1, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	3301      	adds	r3, #1
 8001234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_Init+0x196>
 8001246:	2301      	movs	r3, #1
 8001248:	e022      	b.n	8001290 <HAL_I2C_Init+0x1dc>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <HAL_I2C_Init+0x1bc>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1e58      	subs	r0, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6859      	ldr	r1, [r3, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	440b      	add	r3, r1
 8001260:	fbb0 f3f3 	udiv	r3, r0, r3
 8001264:	3301      	adds	r3, #1
 8001266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126e:	e00f      	b.n	8001290 <HAL_I2C_Init+0x1dc>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e58      	subs	r0, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	0099      	lsls	r1, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	fbb0 f3f3 	udiv	r3, r0, r3
 8001286:	3301      	adds	r3, #1
 8001288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	6809      	ldr	r1, [r1, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6911      	ldr	r1, [r2, #16]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68d2      	ldr	r2, [r2, #12]
 80012ca:	4311      	orrs	r1, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2220      	movs	r2, #32
 800130a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	000186a0 	.word	0x000186a0
 800132c:	001e847f 	.word	0x001e847f
 8001330:	003d08ff 	.word	0x003d08ff
 8001334:	431bde83 	.word	0x431bde83
 8001338:	10624dd3 	.word	0x10624dd3

0800133c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	461a      	mov	r2, r3
 8001348:	460b      	mov	r3, r1
 800134a:	817b      	strh	r3, [r7, #10]
 800134c:	4613      	mov	r3, r2
 800134e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff fbd8 	bl	8000b04 <HAL_GetTick>
 8001354:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b20      	cmp	r3, #32
 8001360:	f040 80e0 	bne.w	8001524 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2319      	movs	r3, #25
 800136a:	2201      	movs	r2, #1
 800136c:	4970      	ldr	r1, [pc, #448]	; (8001530 <HAL_I2C_Master_Transmit+0x1f4>)
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f964 	bl	800163c <I2C_WaitOnFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800137a:	2302      	movs	r3, #2
 800137c:	e0d3      	b.n	8001526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_I2C_Master_Transmit+0x50>
 8001388:	2302      	movs	r3, #2
 800138a:	e0cc      	b.n	8001526 <HAL_I2C_Master_Transmit+0x1ea>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d007      	beq.n	80013b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2221      	movs	r2, #33	; 0x21
 80013c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2210      	movs	r2, #16
 80013ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	893a      	ldrh	r2, [r7, #8]
 80013e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4a50      	ldr	r2, [pc, #320]	; (8001534 <HAL_I2C_Master_Transmit+0x1f8>)
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013f4:	8979      	ldrh	r1, [r7, #10]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f89c 	bl	8001538 <I2C_MasterRequestWrite>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e08d      	b.n	8001526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001420:	e066      	b.n	80014f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	6a39      	ldr	r1, [r7, #32]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fa22 	bl	8001870 <I2C_WaitOnTXEFlagUntilTimeout>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00d      	beq.n	800144e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2b04      	cmp	r3, #4
 8001438:	d107      	bne.n	800144a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06b      	b.n	8001526 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d11b      	bne.n	80014c4 <HAL_I2C_Master_Transmit+0x188>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d017      	beq.n	80014c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	6a39      	ldr	r1, [r7, #32]
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 fa19 	bl	8001900 <I2C_WaitOnBTFFlagUntilTimeout>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d107      	bne.n	80014ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e01a      	b.n	8001526 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d194      	bne.n	8001422 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e000      	b.n	8001526 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001524:	2302      	movs	r3, #2
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00100002 	.word	0x00100002
 8001534:	ffff0000 	.word	0xffff0000

08001538 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	460b      	mov	r3, r1
 8001546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d006      	beq.n	8001562 <I2C_MasterRequestWrite+0x2a>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <I2C_MasterRequestWrite+0x2a>
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001560:	d108      	bne.n	8001574 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00b      	b.n	800158c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	2b12      	cmp	r3, #18
 800157a:	d107      	bne.n	800158c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f84f 	bl	800163c <I2C_WaitOnFlagUntilTimeout>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00d      	beq.n	80015c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b2:	d103      	bne.n	80015bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e035      	b.n	800162c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015c8:	d108      	bne.n	80015dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	e01b      	b.n	8001614 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	11db      	asrs	r3, r3, #7
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f003 0306 	and.w	r3, r3, #6
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f063 030f 	orn	r3, r3, #15
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <I2C_MasterRequestWrite+0xfc>)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f898 	bl	8001730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e010      	b.n	800162c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800160a:	897b      	ldrh	r3, [r7, #10]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <I2C_MasterRequestWrite+0x100>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f888 	bl	8001730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	00010008 	.word	0x00010008
 8001638:	00010002 	.word	0x00010002

0800163c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800164c:	e048      	b.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d044      	beq.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001656:	f7ff fa55 	bl	8000b04 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d302      	bcc.n	800166c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d139      	bne.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10d      	bne.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	43da      	mvns	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4013      	ands	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	e00c      	b.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	43da      	mvns	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	4013      	ands	r3, r2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d116      	bne.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f043 0220 	orr.w	r2, r3, #32
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e023      	b.n	8001728 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10d      	bne.n	8001706 <I2C_WaitOnFlagUntilTimeout+0xca>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	43da      	mvns	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	e00c      	b.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	43da      	mvns	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4013      	ands	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	429a      	cmp	r2, r3
 8001724:	d093      	beq.n	800164e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800173e:	e071      	b.n	8001824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174e:	d123      	bne.n	8001798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f043 0204 	orr.w	r2, r3, #4
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e067      	b.n	8001868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179e:	d041      	beq.n	8001824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a0:	f7ff f9b0 	bl	8000b04 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d302      	bcc.n	80017b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d136      	bne.n	8001824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10c      	bne.n	80017da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4013      	ands	r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	e00b      	b.n	80017f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4013      	ands	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e021      	b.n	8001868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10c      	bne.n	8001848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	43da      	mvns	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4013      	ands	r3, r2
 800183a:	b29b      	uxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e00b      	b.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4013      	ands	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf14      	ite	ne
 800185a:	2301      	movne	r3, #1
 800185c:	2300      	moveq	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	f47f af6d 	bne.w	8001740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187c:	e034      	b.n	80018e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f886 	bl	8001990 <I2C_IsAcknowledgeFailed>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e034      	b.n	80018f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d028      	beq.n	80018e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001896:	f7ff f935 	bl	8000b04 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d302      	bcc.n	80018ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d11d      	bne.n	80018e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b80      	cmp	r3, #128	; 0x80
 80018b8:	d016      	beq.n	80018e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e007      	b.n	80018f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	2b80      	cmp	r3, #128	; 0x80
 80018f4:	d1c3      	bne.n	800187e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800190c:	e034      	b.n	8001978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f83e 	bl	8001990 <I2C_IsAcknowledgeFailed>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e034      	b.n	8001988 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d028      	beq.n	8001978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001926:	f7ff f8ed 	bl	8000b04 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	429a      	cmp	r2, r3
 8001934:	d302      	bcc.n	800193c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d11d      	bne.n	8001978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b04      	cmp	r3, #4
 8001948:	d016      	beq.n	8001978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e007      	b.n	8001988 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b04      	cmp	r3, #4
 8001984:	d1c3      	bne.n	800190e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d11b      	bne.n	80019e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e26c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8087 	beq.w	8001b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0c:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d00c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a18:	4b8f      	ldr	r3, [pc, #572]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d112      	bne.n	8001a4a <HAL_RCC_OscConfig+0x5e>
 8001a24:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d10b      	bne.n	8001a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a32:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d06c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x12c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d168      	bne.n	8001b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e246      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x76>
 8001a54:	4b80      	ldr	r3, [pc, #512]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a7f      	ldr	r2, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e02e      	b.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x98>
 8001a6a:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a77      	ldr	r2, [pc, #476]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xbc>
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a71      	ldr	r2, [pc, #452]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001aa8:	4b6b      	ldr	r3, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a67      	ldr	r2, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f81c 	bl	8000b04 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f818 	bl	8000b04 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1fa      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xe4>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f808 	bl	8000b04 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f804 	bl	8000b04 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1e6      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x10c>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d063      	beq.n	8001bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b26:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b32:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d11c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x18c>
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_RCC_OscConfig+0x176>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1ba      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4939      	ldr	r1, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	e03a      	b.n	8001bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7fe ffbd 	bl	8000b04 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7fe ffb9 	bl	8000b04 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e19b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4927      	ldr	r1, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe ff9c 	bl	8000b04 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7fe ff98 	bl	8000b04 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e17a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03a      	beq.n	8001c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d019      	beq.n	8001c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7fe ff7c 	bl	8000b04 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7fe ff78 	bl	8000b04 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e15a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f000 fab8 	bl	80021a4 <RCC_Delay>
 8001c34:	e01c      	b.n	8001c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ff62 	bl	8000b04 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c42:	e00f      	b.n	8001c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7fe ff5e 	bl	8000b04 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d908      	bls.n	8001c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e140      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	42420000 	.word	0x42420000
 8001c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	4b9e      	ldr	r3, [pc, #632]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e9      	bne.n	8001c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a6 	beq.w	8001dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c82:	4b97      	ldr	r3, [pc, #604]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10d      	bne.n	8001caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a93      	ldr	r2, [pc, #588]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b91      	ldr	r3, [pc, #580]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d118      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb6:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a8a      	ldr	r2, [pc, #552]	; (8001ee4 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe ff1f 	bl	8000b04 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe ff1b 	bl	8000b04 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0fd      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <HAL_RCC_OscConfig+0x4f8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x312>
 8001cf0:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e02d      	b.n	8001d5a <HAL_RCC_OscConfig+0x36e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x334>
 8001d06:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a75      	ldr	r2, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a72      	ldr	r2, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	e01c      	b.n	8001d5a <HAL_RCC_OscConfig+0x36e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x356>
 8001d28:	4b6d      	ldr	r3, [pc, #436]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a6c      	ldr	r2, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	4b6a      	ldr	r3, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a69      	ldr	r2, [pc, #420]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0x36e>
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a66      	ldr	r2, [pc, #408]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a63      	ldr	r2, [pc, #396]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d015      	beq.n	8001d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7fe fecf 	bl	8000b04 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fecb 	bl	8000b04 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0ab      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ee      	beq.n	8001d6a <HAL_RCC_OscConfig+0x37e>
 8001d8c:	e014      	b.n	8001db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe feb9 	bl	8000b04 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe feb5 	bl	8000b04 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e095      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a47      	ldr	r2, [pc, #284]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8081 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d061      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d146      	bne.n	8001e76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_RCC_OscConfig+0x4fc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fe89 	bl	8000b04 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fe85 	bl	8000b04 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e067      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	492d      	ldr	r1, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a19      	ldr	r1, [r3, #32]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	430b      	orrs	r3, r1
 8001e42:	4927      	ldr	r1, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x4fc>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fe59 	bl	8000b04 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe fe55 	bl	8000b04 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e037      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46a>
 8001e74:	e02f      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_RCC_OscConfig+0x4fc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fe42 	bl	8000b04 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fe3e 	bl	8000b04 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e020      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x498>
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	42420060 	.word	0x42420060

08001eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0d0      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d910      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4965      	ldr	r1, [pc, #404]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0b8      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	494d      	ldr	r1, [pc, #308]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d040      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d115      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07f      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e073      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06b      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4936      	ldr	r1, [pc, #216]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fd92 	bl	8000b04 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fd8e 	bl	8000b04 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e053      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d210      	bcs.n	800203c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e032      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4916      	ldr	r1, [pc, #88]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800207a:	f000 f821 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800207e:	4602      	mov	r2, r0
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	490a      	ldr	r1, [pc, #40]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1d0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fcf0 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08003158 	.word	0x08003158
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_GetSysClockFreq+0x94>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x30>
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ee:	e027      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f2:	613b      	str	r3, [r7, #16]
      break;
 80020f4:	e027      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	0c9b      	lsrs	r3, r3, #18
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_GetSysClockFreq+0x94>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0c5b      	lsrs	r3, r3, #17
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_RCC_GetSysClockFreq+0xa0>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_RCC_GetSysClockFreq+0x98>)
 8002122:	fb02 f203 	mul.w	r2, r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e004      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	613b      	str	r3, [r7, #16]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	613b      	str	r3, [r7, #16]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	693b      	ldr	r3, [r7, #16]
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	08003170 	.word	0x08003170
 8002160:	08003180 	.word	0x08003180
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08003168 	.word	0x08003168

080021a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <RCC_Delay+0x34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <RCC_Delay+0x38>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0a5b      	lsrs	r3, r3, #9
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c0:	bf00      	nop
  }
  while (Delay --);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	60fa      	str	r2, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <RCC_Delay+0x1c>
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000000 	.word	0x20000000
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e041      	b.n	8002276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fb54 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fc18 	bl	8002a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e03a      	b.n	800230e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_TIM_Base_Start_IT+0x98>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x58>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x58>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <HAL_TIM_Base_Start_IT+0x9c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x58>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_TIM_Base_Start_IT+0xa0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d010      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e007      	b.n	800230c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40012c00 	.word	0x40012c00
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800

08002324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f839 	bl	80023c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 fb76 	bl	8002a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_TIM_PWM_Start+0x24>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e022      	b.n	800243e <HAL_TIM_PWM_Start+0x6a>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d109      	bne.n	8002412 <HAL_TIM_PWM_Start+0x3e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e015      	b.n	800243e <HAL_TIM_PWM_Start+0x6a>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d109      	bne.n	800242c <HAL_TIM_PWM_Start+0x58>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e008      	b.n	800243e <HAL_TIM_PWM_Start+0x6a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e05e      	b.n	8002504 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Start+0x82>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002454:	e013      	b.n	800247e <HAL_TIM_PWM_Start+0xaa>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0x92>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002464:	e00b      	b.n	800247e <HAL_TIM_PWM_Start+0xaa>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0xa2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002474:	e003      	b.n	800247e <HAL_TIM_PWM_Start+0xaa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fd70 	bl	8002f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_TIM_PWM_Start+0x138>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d107      	bne.n	80024a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_TIM_PWM_Start+0x138>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_TIM_PWM_Start+0xfa>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d009      	beq.n	80024ce <HAL_TIM_PWM_Start+0xfa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_TIM_PWM_Start+0x13c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_TIM_PWM_Start+0xfa>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_TIM_PWM_Start+0x140>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d111      	bne.n	80024f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d010      	beq.n	8002502 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f0:	e007      	b.n	8002502 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800

08002518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0202 	mvn.w	r2, #2
 800254c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa5a 	bl	8002a1c <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa4d 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa5c 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0204 	mvn.w	r2, #4
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa34 	bl	8002a1c <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa27 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fa36 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0208 	mvn.w	r2, #8
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2204      	movs	r2, #4
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa0e 	bl	8002a1c <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa01 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fa10 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f9e8 	bl	8002a1c <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f9db 	bl	8002a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f9ea 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe f862 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fced 	bl	8003082 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f9ba 	bl	8002a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0220 	mvn.w	r2, #32
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fcc0 	bl	8003070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002712:	2302      	movs	r3, #2
 8002714:	e0ae      	b.n	8002874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f200 809f 	bhi.w	8002864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	08002761 	.word	0x08002761
 8002730:	08002865 	.word	0x08002865
 8002734:	08002865 	.word	0x08002865
 8002738:	08002865 	.word	0x08002865
 800273c:	080027a1 	.word	0x080027a1
 8002740:	08002865 	.word	0x08002865
 8002744:	08002865 	.word	0x08002865
 8002748:	08002865 	.word	0x08002865
 800274c:	080027e3 	.word	0x080027e3
 8002750:	08002865 	.word	0x08002865
 8002754:	08002865 	.word	0x08002865
 8002758:	08002865 	.word	0x08002865
 800275c:	08002823 	.word	0x08002823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f9e2 	bl	8002b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
      break;
 800279e:	e064      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fa28 	bl	8002bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      break;
 80027e0:	e043      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fa71 	bl	8002cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0208 	orr.w	r2, r2, #8
 80027fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0204 	bic.w	r2, r2, #4
 800280c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
      break;
 8002820:	e023      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fabb 	bl	8002da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e002      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
      break;
 8002868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_TIM_ConfigClockSource+0x1c>
 8002894:	2302      	movs	r3, #2
 8002896:	e0b4      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0x186>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d0:	d03e      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xd4>
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	f200 8087 	bhi.w	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	f000 8086 	beq.w	80029ee <HAL_TIM_ConfigClockSource+0x172>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d87f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d01a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xa6>
 80028ec:	2b70      	cmp	r3, #112	; 0x70
 80028ee:	d87b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f0:	2b60      	cmp	r3, #96	; 0x60
 80028f2:	d050      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x11a>
 80028f4:	2b60      	cmp	r3, #96	; 0x60
 80028f6:	d877      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f8:	2b50      	cmp	r3, #80	; 0x50
 80028fa:	d03c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xfa>
 80028fc:	2b50      	cmp	r3, #80	; 0x50
 80028fe:	d873      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d058      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d86f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d064      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 800290c:	2b30      	cmp	r3, #48	; 0x30
 800290e:	d86b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d060      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d867      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d05a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	e062      	b.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f000 fafc 	bl	8002f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
      break;
 800294e:	e04f      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f000 fae5 	bl	8002f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002972:	609a      	str	r2, [r3, #8]
      break;
 8002974:	e03c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 fa5c 	bl	8002e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2150      	movs	r1, #80	; 0x50
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fab3 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002994:	e02c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 fa7a 	bl	8002e9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2160      	movs	r1, #96	; 0x60
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 faa3 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029b4:	e01c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 fa3c 	bl	8002e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2140      	movs	r1, #64	; 0x40
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa93 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029d4:	e00c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fa8a 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e000      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <TIM_Base_SetConfig+0xd0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <TIM_Base_SetConfig+0x30>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d007      	beq.n	8002a84 <TIM_Base_SetConfig+0x30>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <TIM_Base_SetConfig+0xd4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0x30>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a2b      	ldr	r2, [pc, #172]	; (8002b2c <TIM_Base_SetConfig+0xd8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <TIM_Base_SetConfig+0xd0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <TIM_Base_SetConfig+0x62>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d007      	beq.n	8002ab6 <TIM_Base_SetConfig+0x62>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <TIM_Base_SetConfig+0xd4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <TIM_Base_SetConfig+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <TIM_Base_SetConfig+0xd8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <TIM_Base_SetConfig+0xd0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f023 0201 	bic.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800

08002b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f023 0201 	bic.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 0302 	bic.w	r3, r3, #2
 8002b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <TIM_OC1_SetConfig+0xc8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0308 	bic.w	r3, r3, #8
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <TIM_OC1_SetConfig+0xc8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d111      	bne.n	8002bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00

08002bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f023 0210 	bic.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f023 0320 	bic.w	r3, r3, #32
 8002c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <TIM_OC2_SetConfig+0xd0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10d      	bne.n	8002c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <TIM_OC2_SetConfig+0xd0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d113      	bne.n	8002ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00

08002cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <TIM_OC3_SetConfig+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <TIM_OC3_SetConfig+0xd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d113      	bne.n	8002d7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00

08002da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <TIM_OC4_SetConfig+0x98>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	019b      	lsls	r3, r3, #6
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00

08002e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 030a 	bic.w	r3, r3, #10
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	621a      	str	r2, [r3, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2201      	movs	r2, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e046      	b.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d009      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a10      	ldr	r2, [pc, #64]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10c      	bne.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800

08003070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <__libc_init_array>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	2600      	movs	r6, #0
 8003098:	4d0c      	ldr	r5, [pc, #48]	; (80030cc <__libc_init_array+0x38>)
 800309a:	4c0d      	ldr	r4, [pc, #52]	; (80030d0 <__libc_init_array+0x3c>)
 800309c:	1b64      	subs	r4, r4, r5
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	42a6      	cmp	r6, r4
 80030a2:	d109      	bne.n	80030b8 <__libc_init_array+0x24>
 80030a4:	f000 f822 	bl	80030ec <_init>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4d0a      	ldr	r5, [pc, #40]	; (80030d4 <__libc_init_array+0x40>)
 80030ac:	4c0a      	ldr	r4, [pc, #40]	; (80030d8 <__libc_init_array+0x44>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	42a6      	cmp	r6, r4
 80030b4:	d105      	bne.n	80030c2 <__libc_init_array+0x2e>
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030bc:	4798      	blx	r3
 80030be:	3601      	adds	r6, #1
 80030c0:	e7ee      	b.n	80030a0 <__libc_init_array+0xc>
 80030c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c6:	4798      	blx	r3
 80030c8:	3601      	adds	r6, #1
 80030ca:	e7f2      	b.n	80030b2 <__libc_init_array+0x1e>
 80030cc:	08003184 	.word	0x08003184
 80030d0:	08003184 	.word	0x08003184
 80030d4:	08003184 	.word	0x08003184
 80030d8:	08003188 	.word	0x08003188

080030dc <memset>:
 80030dc:	4603      	mov	r3, r0
 80030de:	4402      	add	r2, r0
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d100      	bne.n	80030e6 <memset+0xa>
 80030e4:	4770      	bx	lr
 80030e6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ea:	e7f9      	b.n	80030e0 <memset+0x4>

080030ec <_init>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr

080030f8 <_fini>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr
